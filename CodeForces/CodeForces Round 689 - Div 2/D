#include <bits/stdc++.h>
#include <ext/pb_ds/tree_policy.hpp>
#include <ext/pb_ds/assoc_container.hpp>

#define ff first
#define ss second
#define ll long long
#define double long double
#define pb push_back
#define pll pair<ll, ll>
#define pii pair<int, int>

#define sz(x) (int)x.size()
#define range(x) x.begin(),x.end()
#define rep(i,k,n) for(int i=k;i<n;i++)
#define show(x) cout<<#x<<" :: "<<x<<'\n';
#define iosbase ios_base::sync_with_stdio(false); cin.tie(NULL);
#define show2(x,y) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<'\n';
#define show3(x,y,z) cout<<#x<<" :: "<<x<<"\t"<<#y<<" :: "<<y<<"\t"<<#z<<" :: "<<z<<'\n';
#define oset tree<int , null_type, less<int> , rb_tree_tag, tree_order_statistics_node_update>

using namespace std;
using namespace __gnu_pbds;

const ll inf = 1e18;
const ll N = 2000005;
const ll mm = 1e9 + 7;

vector<ll> sum;
set<ll> cache;
vector<ll> v; 
void divide(int st, int en)
{
    //show2(st, en);
    if(st == en)
    {
        cache.insert(sum[en] - sum[st - 1]);
        return;
    }
    ll mid = (v[st] + v[en]) / 2;
    auto it = upper_bound(range(v), mid) - v.begin();
    it--;

    cache.insert(sum[it] - sum[st - 1]);
    cache.insert(sum[en] - sum[it]);
    divide(st, it);
    divide(it + 1, en);

}
int main()
{
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #endif
    iosbase;
    
    int test;
    cin>>test;
    while(test--)
    {
        ll n, q;
        cin>>n>>q;

        ll a[n];
        rep(i,0,n) cin>>a[i];
        sort(a, a + n);
        map<ll, ll> cnt;

        v.clear();
        v.pb(0);

        rep(i,0,n)
        {
            int cur = 1;
            while(i + 1 < n && a[i] == a[i + 1])
            {
                i++;
                cur++;
            }
            cnt[a[i]] = cur;
            v.pb(a[i]);
        }

        int m = sz(v);
        sum = vector<ll> (m + 1, 0);

        rep(i,1,m)
        {
            sum[i] = sum[i - 1] + (cnt[v[i]] * v[i]);
            //show2(i, sum[i]);
        }
        cache.clear();
        divide(1, m - 1);
        cache.insert(sum[m - 1]);
        rep(i,0,q)
        {
            ll x;
            cin>>x;
            if(cache.find(x) != cache.end())
            {
                cout<<"Yes\n";
            }
            else
            {
                cout<<"No\n";
            }
        }
    }
    return 0;
}
